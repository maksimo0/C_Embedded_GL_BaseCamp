
lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c34  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001dbc  08001dbc  00011dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001dcc  08001dcc  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08001dcc  08001dcc  00011dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001dd4  08001dd4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001dd4  08001dd4  00011dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001dd8  08001dd8  00011dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08001ddc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00000074  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000084  20000084  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   000041e7  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001166  00000000  00000000  00024227  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000470  00000000  00000000  00025390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000003c8  00000000  00000000  00025800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f0ea  00000000  00000000  00025bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000596e  00000000  00000000  00044cb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bbe9e  00000000  00000000  0004a620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001064be  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000f7c  00000000  00000000  00106510  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001da4 	.word	0x08001da4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08001da4 	.word	0x08001da4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <swt1>:

extern volatile uint8_t speed_flag;
extern volatile uint8_t scheme_flag;
extern volatile uint8_t start_stop_flag;

void swt1() {
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
	if (speed_flag > 0) {
 80004d0:	4b0c      	ldr	r3, [pc, #48]	; (8000504 <swt1+0x38>)
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	b2db      	uxtb	r3, r3
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d00e      	beq.n	80004f8 <swt1+0x2c>
		speed_flag--;
 80004da:	4b0a      	ldr	r3, [pc, #40]	; (8000504 <swt1+0x38>)
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	b2db      	uxtb	r3, r3
 80004e0:	3b01      	subs	r3, #1
 80004e2:	b2da      	uxtb	r2, r3
 80004e4:	4b07      	ldr	r3, [pc, #28]	; (8000504 <swt1+0x38>)
 80004e6:	701a      	strb	r2, [r3, #0]
		if (speed_flag == 0) {
 80004e8:	4b06      	ldr	r3, [pc, #24]	; (8000504 <swt1+0x38>)
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	b2db      	uxtb	r3, r3
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d102      	bne.n	80004f8 <swt1+0x2c>
			speed_flag = 3;
 80004f2:	4b04      	ldr	r3, [pc, #16]	; (8000504 <swt1+0x38>)
 80004f4:	2203      	movs	r2, #3
 80004f6:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80004f8:	bf00      	nop
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	20000000 	.word	0x20000000

08000508 <swt2>:

void swt2() {
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
	start_stop_flag = (start_stop_flag == 0) ? 1 : 0;
 800050c:	4b07      	ldr	r3, [pc, #28]	; (800052c <swt2+0x24>)
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	b2db      	uxtb	r3, r3
 8000512:	2b00      	cmp	r3, #0
 8000514:	bf0c      	ite	eq
 8000516:	2301      	moveq	r3, #1
 8000518:	2300      	movne	r3, #0
 800051a:	b2db      	uxtb	r3, r3
 800051c:	461a      	mov	r2, r3
 800051e:	4b03      	ldr	r3, [pc, #12]	; (800052c <swt2+0x24>)
 8000520:	701a      	strb	r2, [r3, #0]
}
 8000522:	bf00      	nop
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr
 800052c:	20000001 	.word	0x20000001

08000530 <swt3>:

void swt3() {
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
	if (speed_flag < 4) {
 8000534:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <swt3+0x38>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	b2db      	uxtb	r3, r3
 800053a:	2b03      	cmp	r3, #3
 800053c:	d80e      	bhi.n	800055c <swt3+0x2c>
		speed_flag++;
 800053e:	4b0a      	ldr	r3, [pc, #40]	; (8000568 <swt3+0x38>)
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	b2db      	uxtb	r3, r3
 8000544:	3301      	adds	r3, #1
 8000546:	b2da      	uxtb	r2, r3
 8000548:	4b07      	ldr	r3, [pc, #28]	; (8000568 <swt3+0x38>)
 800054a:	701a      	strb	r2, [r3, #0]
		if (speed_flag == 4) {
 800054c:	4b06      	ldr	r3, [pc, #24]	; (8000568 <swt3+0x38>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	b2db      	uxtb	r3, r3
 8000552:	2b04      	cmp	r3, #4
 8000554:	d102      	bne.n	800055c <swt3+0x2c>
			speed_flag = 1;
 8000556:	4b04      	ldr	r3, [pc, #16]	; (8000568 <swt3+0x38>)
 8000558:	2201      	movs	r2, #1
 800055a:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800055c:	bf00      	nop
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	20000000 	.word	0x20000000

0800056c <swt4>:

void swt4() {
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
	led_stop();
 8000570:	f000 f864 	bl	800063c <led_stop>
	if (scheme_flag < 3) {
 8000574:	4b0a      	ldr	r3, [pc, #40]	; (80005a0 <swt4+0x34>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	b2db      	uxtb	r3, r3
 800057a:	2b02      	cmp	r3, #2
 800057c:	d80e      	bhi.n	800059c <swt4+0x30>
		scheme_flag++;
 800057e:	4b08      	ldr	r3, [pc, #32]	; (80005a0 <swt4+0x34>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	b2db      	uxtb	r3, r3
 8000584:	3301      	adds	r3, #1
 8000586:	b2da      	uxtb	r2, r3
 8000588:	4b05      	ldr	r3, [pc, #20]	; (80005a0 <swt4+0x34>)
 800058a:	701a      	strb	r2, [r3, #0]
		if (scheme_flag == 3) {
 800058c:	4b04      	ldr	r3, [pc, #16]	; (80005a0 <swt4+0x34>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	b2db      	uxtb	r3, r3
 8000592:	2b03      	cmp	r3, #3
 8000594:	d102      	bne.n	800059c <swt4+0x30>
			scheme_flag = 0;
 8000596:	4b02      	ldr	r3, [pc, #8]	; (80005a0 <swt4+0x34>)
 8000598:	2200      	movs	r2, #0
 800059a:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800059c:	bf00      	nop
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	2000002c 	.word	0x2000002c

080005a4 <swt5>:

void swt5() {
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
	led_stop();
 80005a8:	f000 f848 	bl	800063c <led_stop>
	if (scheme_flag >= 0) {
 80005ac:	4b09      	ldr	r3, [pc, #36]	; (80005d4 <swt5+0x30>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
		scheme_flag--;
 80005b0:	4b08      	ldr	r3, [pc, #32]	; (80005d4 <swt5+0x30>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	3b01      	subs	r3, #1
 80005b8:	b2da      	uxtb	r2, r3
 80005ba:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <swt5+0x30>)
 80005bc:	701a      	strb	r2, [r3, #0]
		if (scheme_flag == 255) {
 80005be:	4b05      	ldr	r3, [pc, #20]	; (80005d4 <swt5+0x30>)
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	2bff      	cmp	r3, #255	; 0xff
 80005c6:	d102      	bne.n	80005ce <swt5+0x2a>
			scheme_flag = 2;
 80005c8:	4b02      	ldr	r3, [pc, #8]	; (80005d4 <swt5+0x30>)
 80005ca:	2202      	movs	r2, #2
 80005cc:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	2000002c 	.word	0x2000002c

080005d8 <led_init>:
#include "leds.h"

extern led_t leds[];

void led_init(led_t *led, uint32_t period, uint32_t pulse, uint32_t pin)
{
 80005d8:	b480      	push	{r7}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
 80005de:	60f8      	str	r0, [r7, #12]
 80005e0:	60b9      	str	r1, [r7, #8]
 80005e2:	607a      	str	r2, [r7, #4]
 80005e4:	603b      	str	r3, [r7, #0]
	led->period	= period;
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	68ba      	ldr	r2, [r7, #8]
 80005ea:	605a      	str	r2, [r3, #4]
	led->pulse	= pulse;
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	687a      	ldr	r2, [r7, #4]
 80005f0:	609a      	str	r2, [r3, #8]
	led->port	= GPIOD;
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	4a07      	ldr	r2, [pc, #28]	; (8000614 <led_init+0x3c>)
 80005f6:	60da      	str	r2, [r3, #12]
	led->pin	= (0x0001 << pin);
 80005f8:	2201      	movs	r2, #1
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000600:	b29a      	uxth	r2, r3
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	821a      	strh	r2, [r3, #16]
}
 8000606:	bf00      	nop
 8000608:	3714      	adds	r7, #20
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	40020c00 	.word	0x40020c00

08000618 <led_write>:

void led_write(led_t *led, GPIO_PinState state)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	460b      	mov	r3, r1
 8000622:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(led->port, led->pin, state);
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	68d8      	ldr	r0, [r3, #12]
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	8a1b      	ldrh	r3, [r3, #16]
 800062c:	78fa      	ldrb	r2, [r7, #3]
 800062e:	4619      	mov	r1, r3
 8000630:	f000 ff2a 	bl	8001488 <HAL_GPIO_WritePin>
}
 8000634:	bf00      	nop
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <led_stop>:

void led_stop()
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < LEDS_QUANTITY; i++) {
 8000642:	2300      	movs	r3, #0
 8000644:	71fb      	strb	r3, [r7, #7]
 8000646:	e00d      	b.n	8000664 <led_stop+0x28>
		led_write(&leds[i], 0);
 8000648:	79fa      	ldrb	r2, [r7, #7]
 800064a:	4613      	mov	r3, r2
 800064c:	009b      	lsls	r3, r3, #2
 800064e:	4413      	add	r3, r2
 8000650:	009b      	lsls	r3, r3, #2
 8000652:	4a08      	ldr	r2, [pc, #32]	; (8000674 <led_stop+0x38>)
 8000654:	4413      	add	r3, r2
 8000656:	2100      	movs	r1, #0
 8000658:	4618      	mov	r0, r3
 800065a:	f7ff ffdd 	bl	8000618 <led_write>
	for (uint8_t i = 0; i < LEDS_QUANTITY; i++) {
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	3301      	adds	r3, #1
 8000662:	71fb      	strb	r3, [r7, #7]
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	2b03      	cmp	r3, #3
 8000668:	d9ee      	bls.n	8000648 <led_stop+0xc>
	}
}
 800066a:	bf00      	nop
 800066c:	bf00      	nop
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20000030 	.word	0x20000030

08000678 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	for (uint8_t i = 0; i < LEDS_QUANTITY; i++) {
 800067e:	2300      	movs	r3, #0
 8000680:	71fb      	strb	r3, [r7, #7]
 8000682:	e016      	b.n	80006b2 <main+0x3a>
		led_init(&leds[i], 20000, (5000 + i * 5000), (12 + i));
 8000684:	79fa      	ldrb	r2, [r7, #7]
 8000686:	4613      	mov	r3, r2
 8000688:	009b      	lsls	r3, r3, #2
 800068a:	4413      	add	r3, r2
 800068c:	009b      	lsls	r3, r3, #2
 800068e:	4aa9      	ldr	r2, [pc, #676]	; (8000934 <main+0x2bc>)
 8000690:	1898      	adds	r0, r3, r2
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	3301      	adds	r3, #1
 8000696:	f241 3288 	movw	r2, #5000	; 0x1388
 800069a:	fb02 f303 	mul.w	r3, r2, r3
 800069e:	461a      	mov	r2, r3
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	330c      	adds	r3, #12
 80006a4:	f644 6120 	movw	r1, #20000	; 0x4e20
 80006a8:	f7ff ff96 	bl	80005d8 <led_init>
	for (uint8_t i = 0; i < LEDS_QUANTITY; i++) {
 80006ac:	79fb      	ldrb	r3, [r7, #7]
 80006ae:	3301      	adds	r3, #1
 80006b0:	71fb      	strb	r3, [r7, #7]
 80006b2:	79fb      	ldrb	r3, [r7, #7]
 80006b4:	2b03      	cmp	r3, #3
 80006b6:	d9e5      	bls.n	8000684 <main+0xc>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b8:	f000 fbae 	bl	8000e18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006bc:	f000 f9e6 	bl	8000a8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c0:	f000 fa42 	bl	8000b48 <MX_GPIO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (start_stop_flag) {
 80006c4:	4b9c      	ldr	r3, [pc, #624]	; (8000938 <main+0x2c0>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	f000 81d6 	beq.w	8000a7c <main+0x404>
		  if(scheme_flag == 0) {
 80006d0:	4b9a      	ldr	r3, [pc, #616]	; (800093c <main+0x2c4>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d17d      	bne.n	80007d6 <main+0x15e>
			  for (uint8_t i = 0; i < LEDS_QUANTITY; i++) {
 80006da:	2300      	movs	r3, #0
 80006dc:	71bb      	strb	r3, [r7, #6]
 80006de:	e076      	b.n	80007ce <main+0x156>
				  if (leds[i].cnt > (leds[i].period * speed_flag)) {
 80006e0:	79ba      	ldrb	r2, [r7, #6]
 80006e2:	4994      	ldr	r1, [pc, #592]	; (8000934 <main+0x2bc>)
 80006e4:	4613      	mov	r3, r2
 80006e6:	009b      	lsls	r3, r3, #2
 80006e8:	4413      	add	r3, r2
 80006ea:	009b      	lsls	r3, r3, #2
 80006ec:	440b      	add	r3, r1
 80006ee:	6819      	ldr	r1, [r3, #0]
 80006f0:	79ba      	ldrb	r2, [r7, #6]
 80006f2:	4890      	ldr	r0, [pc, #576]	; (8000934 <main+0x2bc>)
 80006f4:	4613      	mov	r3, r2
 80006f6:	009b      	lsls	r3, r3, #2
 80006f8:	4413      	add	r3, r2
 80006fa:	009b      	lsls	r3, r3, #2
 80006fc:	4403      	add	r3, r0
 80006fe:	3304      	adds	r3, #4
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	4a8f      	ldr	r2, [pc, #572]	; (8000940 <main+0x2c8>)
 8000704:	7812      	ldrb	r2, [r2, #0]
 8000706:	b2d2      	uxtb	r2, r2
 8000708:	fb02 f303 	mul.w	r3, r2, r3
 800070c:	4299      	cmp	r1, r3
 800070e:	d908      	bls.n	8000722 <main+0xaa>
					  leds[i].cnt = 0;
 8000710:	79ba      	ldrb	r2, [r7, #6]
 8000712:	4988      	ldr	r1, [pc, #544]	; (8000934 <main+0x2bc>)
 8000714:	4613      	mov	r3, r2
 8000716:	009b      	lsls	r3, r3, #2
 8000718:	4413      	add	r3, r2
 800071a:	009b      	lsls	r3, r3, #2
 800071c:	440b      	add	r3, r1
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
				  }

				  if (leds[i].cnt == i * 5000 * speed_flag) {
 8000722:	79ba      	ldrb	r2, [r7, #6]
 8000724:	4983      	ldr	r1, [pc, #524]	; (8000934 <main+0x2bc>)
 8000726:	4613      	mov	r3, r2
 8000728:	009b      	lsls	r3, r3, #2
 800072a:	4413      	add	r3, r2
 800072c:	009b      	lsls	r3, r3, #2
 800072e:	440b      	add	r3, r1
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	79ba      	ldrb	r2, [r7, #6]
 8000734:	4982      	ldr	r1, [pc, #520]	; (8000940 <main+0x2c8>)
 8000736:	7809      	ldrb	r1, [r1, #0]
 8000738:	b2c9      	uxtb	r1, r1
 800073a:	fb01 f202 	mul.w	r2, r1, r2
 800073e:	f241 3188 	movw	r1, #5000	; 0x1388
 8000742:	fb01 f202 	mul.w	r2, r1, r2
 8000746:	4293      	cmp	r3, r2
 8000748:	d10b      	bne.n	8000762 <main+0xea>
					  led_write(&leds[i], 1);
 800074a:	79ba      	ldrb	r2, [r7, #6]
 800074c:	4613      	mov	r3, r2
 800074e:	009b      	lsls	r3, r3, #2
 8000750:	4413      	add	r3, r2
 8000752:	009b      	lsls	r3, r3, #2
 8000754:	4a77      	ldr	r2, [pc, #476]	; (8000934 <main+0x2bc>)
 8000756:	4413      	add	r3, r2
 8000758:	2101      	movs	r1, #1
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff ff5c 	bl	8000618 <led_write>
 8000760:	e022      	b.n	80007a8 <main+0x130>
				  } else if (leds[i].cnt == (leds[i].pulse * speed_flag)) {
 8000762:	79ba      	ldrb	r2, [r7, #6]
 8000764:	4973      	ldr	r1, [pc, #460]	; (8000934 <main+0x2bc>)
 8000766:	4613      	mov	r3, r2
 8000768:	009b      	lsls	r3, r3, #2
 800076a:	4413      	add	r3, r2
 800076c:	009b      	lsls	r3, r3, #2
 800076e:	440b      	add	r3, r1
 8000770:	6819      	ldr	r1, [r3, #0]
 8000772:	79ba      	ldrb	r2, [r7, #6]
 8000774:	486f      	ldr	r0, [pc, #444]	; (8000934 <main+0x2bc>)
 8000776:	4613      	mov	r3, r2
 8000778:	009b      	lsls	r3, r3, #2
 800077a:	4413      	add	r3, r2
 800077c:	009b      	lsls	r3, r3, #2
 800077e:	4403      	add	r3, r0
 8000780:	3308      	adds	r3, #8
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a6e      	ldr	r2, [pc, #440]	; (8000940 <main+0x2c8>)
 8000786:	7812      	ldrb	r2, [r2, #0]
 8000788:	b2d2      	uxtb	r2, r2
 800078a:	fb02 f303 	mul.w	r3, r2, r3
 800078e:	4299      	cmp	r1, r3
 8000790:	d10a      	bne.n	80007a8 <main+0x130>
					  led_write(&leds[i], 0);
 8000792:	79ba      	ldrb	r2, [r7, #6]
 8000794:	4613      	mov	r3, r2
 8000796:	009b      	lsls	r3, r3, #2
 8000798:	4413      	add	r3, r2
 800079a:	009b      	lsls	r3, r3, #2
 800079c:	4a65      	ldr	r2, [pc, #404]	; (8000934 <main+0x2bc>)
 800079e:	4413      	add	r3, r2
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f7ff ff38 	bl	8000618 <led_write>
				  }
				  leds[i].cnt++;
 80007a8:	79ba      	ldrb	r2, [r7, #6]
 80007aa:	4962      	ldr	r1, [pc, #392]	; (8000934 <main+0x2bc>)
 80007ac:	4613      	mov	r3, r2
 80007ae:	009b      	lsls	r3, r3, #2
 80007b0:	4413      	add	r3, r2
 80007b2:	009b      	lsls	r3, r3, #2
 80007b4:	440b      	add	r3, r1
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	1c59      	adds	r1, r3, #1
 80007ba:	485e      	ldr	r0, [pc, #376]	; (8000934 <main+0x2bc>)
 80007bc:	4613      	mov	r3, r2
 80007be:	009b      	lsls	r3, r3, #2
 80007c0:	4413      	add	r3, r2
 80007c2:	009b      	lsls	r3, r3, #2
 80007c4:	4403      	add	r3, r0
 80007c6:	6019      	str	r1, [r3, #0]
			  for (uint8_t i = 0; i < LEDS_QUANTITY; i++) {
 80007c8:	79bb      	ldrb	r3, [r7, #6]
 80007ca:	3301      	adds	r3, #1
 80007cc:	71bb      	strb	r3, [r7, #6]
 80007ce:	79bb      	ldrb	r3, [r7, #6]
 80007d0:	2b03      	cmp	r3, #3
 80007d2:	d985      	bls.n	80006e0 <main+0x68>
 80007d4:	e776      	b.n	80006c4 <main+0x4c>
			  }
		  } else if (scheme_flag == 1) {
 80007d6:	4b59      	ldr	r3, [pc, #356]	; (800093c <main+0x2c4>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	2b01      	cmp	r3, #1
 80007de:	f040 809f 	bne.w	8000920 <main+0x2a8>
			  for (uint8_t i = 0; i < LEDS_QUANTITY; i++) {
 80007e2:	2300      	movs	r3, #0
 80007e4:	717b      	strb	r3, [r7, #5]
 80007e6:	e096      	b.n	8000916 <main+0x29e>
					if (leds[i].cnt > (leds[i].period * speed_flag)) {
 80007e8:	797a      	ldrb	r2, [r7, #5]
 80007ea:	4952      	ldr	r1, [pc, #328]	; (8000934 <main+0x2bc>)
 80007ec:	4613      	mov	r3, r2
 80007ee:	009b      	lsls	r3, r3, #2
 80007f0:	4413      	add	r3, r2
 80007f2:	009b      	lsls	r3, r3, #2
 80007f4:	440b      	add	r3, r1
 80007f6:	6819      	ldr	r1, [r3, #0]
 80007f8:	797a      	ldrb	r2, [r7, #5]
 80007fa:	484e      	ldr	r0, [pc, #312]	; (8000934 <main+0x2bc>)
 80007fc:	4613      	mov	r3, r2
 80007fe:	009b      	lsls	r3, r3, #2
 8000800:	4413      	add	r3, r2
 8000802:	009b      	lsls	r3, r3, #2
 8000804:	4403      	add	r3, r0
 8000806:	3304      	adds	r3, #4
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4a4d      	ldr	r2, [pc, #308]	; (8000940 <main+0x2c8>)
 800080c:	7812      	ldrb	r2, [r2, #0]
 800080e:	b2d2      	uxtb	r2, r2
 8000810:	fb02 f303 	mul.w	r3, r2, r3
 8000814:	4299      	cmp	r1, r3
 8000816:	d908      	bls.n	800082a <main+0x1b2>
						leds[i].cnt = 0;
 8000818:	797a      	ldrb	r2, [r7, #5]
 800081a:	4946      	ldr	r1, [pc, #280]	; (8000934 <main+0x2bc>)
 800081c:	4613      	mov	r3, r2
 800081e:	009b      	lsls	r3, r3, #2
 8000820:	4413      	add	r3, r2
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	440b      	add	r3, r1
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
					}

					if (leds[i].cnt == i * 5000 * speed_flag) {
 800082a:	797a      	ldrb	r2, [r7, #5]
 800082c:	4941      	ldr	r1, [pc, #260]	; (8000934 <main+0x2bc>)
 800082e:	4613      	mov	r3, r2
 8000830:	009b      	lsls	r3, r3, #2
 8000832:	4413      	add	r3, r2
 8000834:	009b      	lsls	r3, r3, #2
 8000836:	440b      	add	r3, r1
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	797a      	ldrb	r2, [r7, #5]
 800083c:	4940      	ldr	r1, [pc, #256]	; (8000940 <main+0x2c8>)
 800083e:	7809      	ldrb	r1, [r1, #0]
 8000840:	b2c9      	uxtb	r1, r1
 8000842:	fb01 f202 	mul.w	r2, r1, r2
 8000846:	f241 3188 	movw	r1, #5000	; 0x1388
 800084a:	fb01 f202 	mul.w	r2, r1, r2
 800084e:	4293      	cmp	r3, r2
 8000850:	d11b      	bne.n	800088a <main+0x212>
						led_write(&leds[i%2], 1);
 8000852:	797b      	ldrb	r3, [r7, #5]
 8000854:	f003 0201 	and.w	r2, r3, #1
 8000858:	4613      	mov	r3, r2
 800085a:	009b      	lsls	r3, r3, #2
 800085c:	4413      	add	r3, r2
 800085e:	009b      	lsls	r3, r3, #2
 8000860:	4a34      	ldr	r2, [pc, #208]	; (8000934 <main+0x2bc>)
 8000862:	4413      	add	r3, r2
 8000864:	2101      	movs	r1, #1
 8000866:	4618      	mov	r0, r3
 8000868:	f7ff fed6 	bl	8000618 <led_write>
						led_write(&leds[i%2+2], 1);
 800086c:	797b      	ldrb	r3, [r7, #5]
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	1c9a      	adds	r2, r3, #2
 8000874:	4613      	mov	r3, r2
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	4413      	add	r3, r2
 800087a:	009b      	lsls	r3, r3, #2
 800087c:	4a2d      	ldr	r2, [pc, #180]	; (8000934 <main+0x2bc>)
 800087e:	4413      	add	r3, r2
 8000880:	2101      	movs	r1, #1
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff fec8 	bl	8000618 <led_write>
 8000888:	e032      	b.n	80008f0 <main+0x278>
					} else if (leds[i].cnt == (leds[i].pulse * speed_flag)) {
 800088a:	797a      	ldrb	r2, [r7, #5]
 800088c:	4929      	ldr	r1, [pc, #164]	; (8000934 <main+0x2bc>)
 800088e:	4613      	mov	r3, r2
 8000890:	009b      	lsls	r3, r3, #2
 8000892:	4413      	add	r3, r2
 8000894:	009b      	lsls	r3, r3, #2
 8000896:	440b      	add	r3, r1
 8000898:	6819      	ldr	r1, [r3, #0]
 800089a:	797a      	ldrb	r2, [r7, #5]
 800089c:	4825      	ldr	r0, [pc, #148]	; (8000934 <main+0x2bc>)
 800089e:	4613      	mov	r3, r2
 80008a0:	009b      	lsls	r3, r3, #2
 80008a2:	4413      	add	r3, r2
 80008a4:	009b      	lsls	r3, r3, #2
 80008a6:	4403      	add	r3, r0
 80008a8:	3308      	adds	r3, #8
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a24      	ldr	r2, [pc, #144]	; (8000940 <main+0x2c8>)
 80008ae:	7812      	ldrb	r2, [r2, #0]
 80008b0:	b2d2      	uxtb	r2, r2
 80008b2:	fb02 f303 	mul.w	r3, r2, r3
 80008b6:	4299      	cmp	r1, r3
 80008b8:	d11a      	bne.n	80008f0 <main+0x278>
						led_write(&leds[i%2], 0);
 80008ba:	797b      	ldrb	r3, [r7, #5]
 80008bc:	f003 0201 	and.w	r2, r3, #1
 80008c0:	4613      	mov	r3, r2
 80008c2:	009b      	lsls	r3, r3, #2
 80008c4:	4413      	add	r3, r2
 80008c6:	009b      	lsls	r3, r3, #2
 80008c8:	4a1a      	ldr	r2, [pc, #104]	; (8000934 <main+0x2bc>)
 80008ca:	4413      	add	r3, r2
 80008cc:	2100      	movs	r1, #0
 80008ce:	4618      	mov	r0, r3
 80008d0:	f7ff fea2 	bl	8000618 <led_write>
						led_write(&leds[i%2+2], 0);
 80008d4:	797b      	ldrb	r3, [r7, #5]
 80008d6:	f003 0301 	and.w	r3, r3, #1
 80008da:	1c9a      	adds	r2, r3, #2
 80008dc:	4613      	mov	r3, r2
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	4413      	add	r3, r2
 80008e2:	009b      	lsls	r3, r3, #2
 80008e4:	4a13      	ldr	r2, [pc, #76]	; (8000934 <main+0x2bc>)
 80008e6:	4413      	add	r3, r2
 80008e8:	2100      	movs	r1, #0
 80008ea:	4618      	mov	r0, r3
 80008ec:	f7ff fe94 	bl	8000618 <led_write>
					}
					leds[i].cnt++;
 80008f0:	797a      	ldrb	r2, [r7, #5]
 80008f2:	4910      	ldr	r1, [pc, #64]	; (8000934 <main+0x2bc>)
 80008f4:	4613      	mov	r3, r2
 80008f6:	009b      	lsls	r3, r3, #2
 80008f8:	4413      	add	r3, r2
 80008fa:	009b      	lsls	r3, r3, #2
 80008fc:	440b      	add	r3, r1
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	1c59      	adds	r1, r3, #1
 8000902:	480c      	ldr	r0, [pc, #48]	; (8000934 <main+0x2bc>)
 8000904:	4613      	mov	r3, r2
 8000906:	009b      	lsls	r3, r3, #2
 8000908:	4413      	add	r3, r2
 800090a:	009b      	lsls	r3, r3, #2
 800090c:	4403      	add	r3, r0
 800090e:	6019      	str	r1, [r3, #0]
			  for (uint8_t i = 0; i < LEDS_QUANTITY; i++) {
 8000910:	797b      	ldrb	r3, [r7, #5]
 8000912:	3301      	adds	r3, #1
 8000914:	717b      	strb	r3, [r7, #5]
 8000916:	797b      	ldrb	r3, [r7, #5]
 8000918:	2b03      	cmp	r3, #3
 800091a:	f67f af65 	bls.w	80007e8 <main+0x170>
 800091e:	e6d1      	b.n	80006c4 <main+0x4c>
				}
		  } else if (scheme_flag == 2) {
 8000920:	4b06      	ldr	r3, [pc, #24]	; (800093c <main+0x2c4>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	b2db      	uxtb	r3, r3
 8000926:	2b02      	cmp	r3, #2
 8000928:	f47f aecc 	bne.w	80006c4 <main+0x4c>
			  for (uint8_t i = 0; i < LEDS_QUANTITY; i++) {
 800092c:	2300      	movs	r3, #0
 800092e:	713b      	strb	r3, [r7, #4]
 8000930:	e09f      	b.n	8000a72 <main+0x3fa>
 8000932:	bf00      	nop
 8000934:	20000030 	.word	0x20000030
 8000938:	20000001 	.word	0x20000001
 800093c:	2000002c 	.word	0x2000002c
 8000940:	20000000 	.word	0x20000000
					if (leds[i].cnt > (leds[i].period * speed_flag)) {
 8000944:	793a      	ldrb	r2, [r7, #4]
 8000946:	494f      	ldr	r1, [pc, #316]	; (8000a84 <main+0x40c>)
 8000948:	4613      	mov	r3, r2
 800094a:	009b      	lsls	r3, r3, #2
 800094c:	4413      	add	r3, r2
 800094e:	009b      	lsls	r3, r3, #2
 8000950:	440b      	add	r3, r1
 8000952:	6819      	ldr	r1, [r3, #0]
 8000954:	793a      	ldrb	r2, [r7, #4]
 8000956:	484b      	ldr	r0, [pc, #300]	; (8000a84 <main+0x40c>)
 8000958:	4613      	mov	r3, r2
 800095a:	009b      	lsls	r3, r3, #2
 800095c:	4413      	add	r3, r2
 800095e:	009b      	lsls	r3, r3, #2
 8000960:	4403      	add	r3, r0
 8000962:	3304      	adds	r3, #4
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4a48      	ldr	r2, [pc, #288]	; (8000a88 <main+0x410>)
 8000968:	7812      	ldrb	r2, [r2, #0]
 800096a:	b2d2      	uxtb	r2, r2
 800096c:	fb02 f303 	mul.w	r3, r2, r3
 8000970:	4299      	cmp	r1, r3
 8000972:	d908      	bls.n	8000986 <main+0x30e>
						leds[i].cnt = 0;
 8000974:	793a      	ldrb	r2, [r7, #4]
 8000976:	4943      	ldr	r1, [pc, #268]	; (8000a84 <main+0x40c>)
 8000978:	4613      	mov	r3, r2
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	4413      	add	r3, r2
 800097e:	009b      	lsls	r3, r3, #2
 8000980:	440b      	add	r3, r1
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
					}

					if (leds[i].cnt == i * 5000 * speed_flag) {
 8000986:	793a      	ldrb	r2, [r7, #4]
 8000988:	493e      	ldr	r1, [pc, #248]	; (8000a84 <main+0x40c>)
 800098a:	4613      	mov	r3, r2
 800098c:	009b      	lsls	r3, r3, #2
 800098e:	4413      	add	r3, r2
 8000990:	009b      	lsls	r3, r3, #2
 8000992:	440b      	add	r3, r1
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	793a      	ldrb	r2, [r7, #4]
 8000998:	493b      	ldr	r1, [pc, #236]	; (8000a88 <main+0x410>)
 800099a:	7809      	ldrb	r1, [r1, #0]
 800099c:	b2c9      	uxtb	r1, r1
 800099e:	fb01 f202 	mul.w	r2, r1, r2
 80009a2:	f241 3188 	movw	r1, #5000	; 0x1388
 80009a6:	fb01 f202 	mul.w	r2, r1, r2
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d11b      	bne.n	80009e6 <main+0x36e>
						led_write(&leds[i%2], 1);
 80009ae:	793b      	ldrb	r3, [r7, #4]
 80009b0:	f003 0201 	and.w	r2, r3, #1
 80009b4:	4613      	mov	r3, r2
 80009b6:	009b      	lsls	r3, r3, #2
 80009b8:	4413      	add	r3, r2
 80009ba:	009b      	lsls	r3, r3, #2
 80009bc:	4a31      	ldr	r2, [pc, #196]	; (8000a84 <main+0x40c>)
 80009be:	4413      	add	r3, r2
 80009c0:	2101      	movs	r1, #1
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff fe28 	bl	8000618 <led_write>
						led_write(&leds[i/2+2], 1);
 80009c8:	793b      	ldrb	r3, [r7, #4]
 80009ca:	085b      	lsrs	r3, r3, #1
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	1c9a      	adds	r2, r3, #2
 80009d0:	4613      	mov	r3, r2
 80009d2:	009b      	lsls	r3, r3, #2
 80009d4:	4413      	add	r3, r2
 80009d6:	009b      	lsls	r3, r3, #2
 80009d8:	4a2a      	ldr	r2, [pc, #168]	; (8000a84 <main+0x40c>)
 80009da:	4413      	add	r3, r2
 80009dc:	2101      	movs	r1, #1
 80009de:	4618      	mov	r0, r3
 80009e0:	f7ff fe1a 	bl	8000618 <led_write>
 80009e4:	e032      	b.n	8000a4c <main+0x3d4>
					} else if (leds[i].cnt == (leds[i].pulse * speed_flag)) {
 80009e6:	793a      	ldrb	r2, [r7, #4]
 80009e8:	4926      	ldr	r1, [pc, #152]	; (8000a84 <main+0x40c>)
 80009ea:	4613      	mov	r3, r2
 80009ec:	009b      	lsls	r3, r3, #2
 80009ee:	4413      	add	r3, r2
 80009f0:	009b      	lsls	r3, r3, #2
 80009f2:	440b      	add	r3, r1
 80009f4:	6819      	ldr	r1, [r3, #0]
 80009f6:	793a      	ldrb	r2, [r7, #4]
 80009f8:	4822      	ldr	r0, [pc, #136]	; (8000a84 <main+0x40c>)
 80009fa:	4613      	mov	r3, r2
 80009fc:	009b      	lsls	r3, r3, #2
 80009fe:	4413      	add	r3, r2
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	4403      	add	r3, r0
 8000a04:	3308      	adds	r3, #8
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a1f      	ldr	r2, [pc, #124]	; (8000a88 <main+0x410>)
 8000a0a:	7812      	ldrb	r2, [r2, #0]
 8000a0c:	b2d2      	uxtb	r2, r2
 8000a0e:	fb02 f303 	mul.w	r3, r2, r3
 8000a12:	4299      	cmp	r1, r3
 8000a14:	d11a      	bne.n	8000a4c <main+0x3d4>
						led_write(&leds[i%2], 0);
 8000a16:	793b      	ldrb	r3, [r7, #4]
 8000a18:	f003 0201 	and.w	r2, r3, #1
 8000a1c:	4613      	mov	r3, r2
 8000a1e:	009b      	lsls	r3, r3, #2
 8000a20:	4413      	add	r3, r2
 8000a22:	009b      	lsls	r3, r3, #2
 8000a24:	4a17      	ldr	r2, [pc, #92]	; (8000a84 <main+0x40c>)
 8000a26:	4413      	add	r3, r2
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f7ff fdf4 	bl	8000618 <led_write>
						led_write(&leds[i/2+2], 0);
 8000a30:	793b      	ldrb	r3, [r7, #4]
 8000a32:	085b      	lsrs	r3, r3, #1
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	1c9a      	adds	r2, r3, #2
 8000a38:	4613      	mov	r3, r2
 8000a3a:	009b      	lsls	r3, r3, #2
 8000a3c:	4413      	add	r3, r2
 8000a3e:	009b      	lsls	r3, r3, #2
 8000a40:	4a10      	ldr	r2, [pc, #64]	; (8000a84 <main+0x40c>)
 8000a42:	4413      	add	r3, r2
 8000a44:	2100      	movs	r1, #0
 8000a46:	4618      	mov	r0, r3
 8000a48:	f7ff fde6 	bl	8000618 <led_write>
					}
					leds[i].cnt++;
 8000a4c:	793a      	ldrb	r2, [r7, #4]
 8000a4e:	490d      	ldr	r1, [pc, #52]	; (8000a84 <main+0x40c>)
 8000a50:	4613      	mov	r3, r2
 8000a52:	009b      	lsls	r3, r3, #2
 8000a54:	4413      	add	r3, r2
 8000a56:	009b      	lsls	r3, r3, #2
 8000a58:	440b      	add	r3, r1
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	1c59      	adds	r1, r3, #1
 8000a5e:	4809      	ldr	r0, [pc, #36]	; (8000a84 <main+0x40c>)
 8000a60:	4613      	mov	r3, r2
 8000a62:	009b      	lsls	r3, r3, #2
 8000a64:	4413      	add	r3, r2
 8000a66:	009b      	lsls	r3, r3, #2
 8000a68:	4403      	add	r3, r0
 8000a6a:	6019      	str	r1, [r3, #0]
			  for (uint8_t i = 0; i < LEDS_QUANTITY; i++) {
 8000a6c:	793b      	ldrb	r3, [r7, #4]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	713b      	strb	r3, [r7, #4]
 8000a72:	793b      	ldrb	r3, [r7, #4]
 8000a74:	2b03      	cmp	r3, #3
 8000a76:	f67f af65 	bls.w	8000944 <main+0x2cc>
 8000a7a:	e623      	b.n	80006c4 <main+0x4c>
				}
		  }
	  } else {
		  led_stop();
 8000a7c:	f7ff fdde 	bl	800063c <led_stop>
	  if (start_stop_flag) {
 8000a80:	e620      	b.n	80006c4 <main+0x4c>
 8000a82:	bf00      	nop
 8000a84:	20000030 	.word	0x20000030
 8000a88:	20000000 	.word	0x20000000

08000a8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b094      	sub	sp, #80	; 0x50
 8000a90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a92:	f107 0320 	add.w	r3, r7, #32
 8000a96:	2230      	movs	r2, #48	; 0x30
 8000a98:	2100      	movs	r1, #0
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f001 f97a 	bl	8001d94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000aa0:	f107 030c 	add.w	r3, r7, #12
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
 8000aae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60bb      	str	r3, [r7, #8]
 8000ab4:	4b22      	ldr	r3, [pc, #136]	; (8000b40 <SystemClock_Config+0xb4>)
 8000ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab8:	4a21      	ldr	r2, [pc, #132]	; (8000b40 <SystemClock_Config+0xb4>)
 8000aba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000abe:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac0:	4b1f      	ldr	r3, [pc, #124]	; (8000b40 <SystemClock_Config+0xb4>)
 8000ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000acc:	2300      	movs	r3, #0
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	4b1c      	ldr	r3, [pc, #112]	; (8000b44 <SystemClock_Config+0xb8>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a1b      	ldr	r2, [pc, #108]	; (8000b44 <SystemClock_Config+0xb8>)
 8000ad6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ada:	6013      	str	r3, [r2, #0]
 8000adc:	4b19      	ldr	r3, [pc, #100]	; (8000b44 <SystemClock_Config+0xb8>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ae4:	607b      	str	r3, [r7, #4]
 8000ae6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aec:	2301      	movs	r3, #1
 8000aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000af0:	2310      	movs	r3, #16
 8000af2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000af4:	2300      	movs	r3, #0
 8000af6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af8:	f107 0320 	add.w	r3, r7, #32
 8000afc:	4618      	mov	r0, r3
 8000afe:	f000 fd01 	bl	8001504 <HAL_RCC_OscConfig>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000b08:	f000 f8a0 	bl	8000c4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b0c:	230f      	movs	r3, #15
 8000b0e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b10:	2300      	movs	r3, #0
 8000b12:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b20:	f107 030c 	add.w	r3, r7, #12
 8000b24:	2100      	movs	r1, #0
 8000b26:	4618      	mov	r0, r3
 8000b28:	f000 ff64 	bl	80019f4 <HAL_RCC_ClockConfig>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000b32:	f000 f88b 	bl	8000c4c <Error_Handler>
  }
}
 8000b36:	bf00      	nop
 8000b38:	3750      	adds	r7, #80	; 0x50
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40007000 	.word	0x40007000

08000b48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b088      	sub	sp, #32
 8000b4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4e:	f107 030c 	add.w	r3, r7, #12
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	605a      	str	r2, [r3, #4]
 8000b58:	609a      	str	r2, [r3, #8]
 8000b5a:	60da      	str	r2, [r3, #12]
 8000b5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60bb      	str	r3, [r7, #8]
 8000b62:	4b36      	ldr	r3, [pc, #216]	; (8000c3c <MX_GPIO_Init+0xf4>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a35      	ldr	r2, [pc, #212]	; (8000c3c <MX_GPIO_Init+0xf4>)
 8000b68:	f043 0308 	orr.w	r3, r3, #8
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b33      	ldr	r3, [pc, #204]	; (8000c3c <MX_GPIO_Init+0xf4>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0308 	and.w	r3, r3, #8
 8000b76:	60bb      	str	r3, [r7, #8]
 8000b78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	607b      	str	r3, [r7, #4]
 8000b7e:	4b2f      	ldr	r3, [pc, #188]	; (8000c3c <MX_GPIO_Init+0xf4>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a2e      	ldr	r2, [pc, #184]	; (8000c3c <MX_GPIO_Init+0xf4>)
 8000b84:	f043 0304 	orr.w	r3, r3, #4
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b2c      	ldr	r3, [pc, #176]	; (8000c3c <MX_GPIO_Init+0xf4>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0304 	and.w	r3, r3, #4
 8000b92:	607b      	str	r3, [r7, #4]
 8000b94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	603b      	str	r3, [r7, #0]
 8000b9a:	4b28      	ldr	r3, [pc, #160]	; (8000c3c <MX_GPIO_Init+0xf4>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a27      	ldr	r2, [pc, #156]	; (8000c3c <MX_GPIO_Init+0xf4>)
 8000ba0:	f043 0301 	orr.w	r3, r3, #1
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b25      	ldr	r3, [pc, #148]	; (8000c3c <MX_GPIO_Init+0xf4>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	603b      	str	r3, [r7, #0]
 8000bb0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000bb8:	4821      	ldr	r0, [pc, #132]	; (8000c40 <MX_GPIO_Init+0xf8>)
 8000bba:	f000 fc65 	bl	8001488 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000bbe:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000bc2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bd0:	f107 030c 	add.w	r3, r7, #12
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	481a      	ldr	r0, [pc, #104]	; (8000c40 <MX_GPIO_Init+0xf8>)
 8000bd8:	f000 faa2 	bl	8001120 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC8 PC9 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11;
 8000bdc:	f44f 6334 	mov.w	r3, #2880	; 0xb40
 8000be0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000be2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000be6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bec:	f107 030c 	add.w	r3, r7, #12
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4814      	ldr	r0, [pc, #80]	; (8000c44 <MX_GPIO_Init+0xfc>)
 8000bf4:	f000 fa94 	bl	8001120 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000bf8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bfc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bfe:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c08:	f107 030c 	add.w	r3, r7, #12
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	480e      	ldr	r0, [pc, #56]	; (8000c48 <MX_GPIO_Init+0x100>)
 8000c10:	f000 fa86 	bl	8001120 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000c14:	2200      	movs	r2, #0
 8000c16:	2100      	movs	r1, #0
 8000c18:	2017      	movs	r0, #23
 8000c1a:	f000 fa4a 	bl	80010b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c1e:	2017      	movs	r0, #23
 8000c20:	f000 fa63 	bl	80010ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c24:	2200      	movs	r2, #0
 8000c26:	2100      	movs	r1, #0
 8000c28:	2028      	movs	r0, #40	; 0x28
 8000c2a:	f000 fa42 	bl	80010b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c2e:	2028      	movs	r0, #40	; 0x28
 8000c30:	f000 fa5b 	bl	80010ea <HAL_NVIC_EnableIRQ>

}
 8000c34:	bf00      	nop
 8000c36:	3720      	adds	r7, #32
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	40023800 	.word	0x40023800
 8000c40:	40020c00 	.word	0x40020c00
 8000c44:	40020800 	.word	0x40020800
 8000c48:	40020000 	.word	0x40020000

08000c4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c50:	b672      	cpsid	i
}
 8000c52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <Error_Handler+0x8>
	...

08000c58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	4b10      	ldr	r3, [pc, #64]	; (8000ca4 <HAL_MspInit+0x4c>)
 8000c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c66:	4a0f      	ldr	r2, [pc, #60]	; (8000ca4 <HAL_MspInit+0x4c>)
 8000c68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ca4 <HAL_MspInit+0x4c>)
 8000c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	603b      	str	r3, [r7, #0]
 8000c7e:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <HAL_MspInit+0x4c>)
 8000c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c82:	4a08      	ldr	r2, [pc, #32]	; (8000ca4 <HAL_MspInit+0x4c>)
 8000c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c88:	6413      	str	r3, [r2, #64]	; 0x40
 8000c8a:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <HAL_MspInit+0x4c>)
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c92:	603b      	str	r3, [r7, #0]
 8000c94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c96:	bf00      	nop
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	40023800 	.word	0x40023800

08000ca8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <NMI_Handler+0x4>

08000cae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cb2:	e7fe      	b.n	8000cb2 <HardFault_Handler+0x4>

08000cb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <MemManage_Handler+0x4>

08000cba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cbe:	e7fe      	b.n	8000cbe <BusFault_Handler+0x4>

08000cc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <UsageFault_Handler+0x4>

08000cc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr

08000ce2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cf4:	f000 f8e2 	bl	8000ebc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cf8:	bf00      	nop
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) == GPIO_PIN_RESET){
 8000d00:	2140      	movs	r1, #64	; 0x40
 8000d02:	4814      	ldr	r0, [pc, #80]	; (8000d54 <EXTI9_5_IRQHandler+0x58>)
 8000d04:	f000 fba8 	bl	8001458 <HAL_GPIO_ReadPin>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d101      	bne.n	8000d12 <EXTI9_5_IRQHandler+0x16>
		swt4();
 8000d0e:	f7ff fc2d 	bl	800056c <swt4>
	}

	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == GPIO_PIN_RESET){
 8000d12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d16:	480f      	ldr	r0, [pc, #60]	; (8000d54 <EXTI9_5_IRQHandler+0x58>)
 8000d18:	f000 fb9e 	bl	8001458 <HAL_GPIO_ReadPin>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d101      	bne.n	8000d26 <EXTI9_5_IRQHandler+0x2a>
		swt5();
 8000d22:	f7ff fc3f 	bl	80005a4 <swt5>
	}

	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == GPIO_PIN_RESET){
 8000d26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d2a:	480a      	ldr	r0, [pc, #40]	; (8000d54 <EXTI9_5_IRQHandler+0x58>)
 8000d2c:	f000 fb94 	bl	8001458 <HAL_GPIO_ReadPin>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d101      	bne.n	8000d3a <EXTI9_5_IRQHandler+0x3e>
		swt3();
 8000d36:	f7ff fbfb 	bl	8000530 <swt3>
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000d3a:	2040      	movs	r0, #64	; 0x40
 8000d3c:	f000 fbbe 	bl	80014bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000d40:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000d44:	f000 fbba 	bl	80014bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000d48:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d4c:	f000 fbb6 	bl	80014bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40020800 	.word	0x40020800

08000d58 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11) == GPIO_PIN_RESET){
 8000d5c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d60:	480d      	ldr	r0, [pc, #52]	; (8000d98 <EXTI15_10_IRQHandler+0x40>)
 8000d62:	f000 fb79 	bl	8001458 <HAL_GPIO_ReadPin>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d101      	bne.n	8000d70 <EXTI15_10_IRQHandler+0x18>
		swt1();
 8000d6c:	f7ff fbae 	bl	80004cc <swt1>
	}
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == GPIO_PIN_RESET){
 8000d70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d74:	4809      	ldr	r0, [pc, #36]	; (8000d9c <EXTI15_10_IRQHandler+0x44>)
 8000d76:	f000 fb6f 	bl	8001458 <HAL_GPIO_ReadPin>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d101      	bne.n	8000d84 <EXTI15_10_IRQHandler+0x2c>
		swt2();
 8000d80:	f7ff fbc2 	bl	8000508 <swt2>
	}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000d84:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000d88:	f000 fb98 	bl	80014bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000d8c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000d90:	f000 fb94 	bl	80014bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d94:	bf00      	nop
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40020800 	.word	0x40020800
 8000d9c:	40020000 	.word	0x40020000

08000da0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000da4:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <SystemInit+0x20>)
 8000da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000daa:	4a05      	ldr	r2, [pc, #20]	; (8000dc0 <SystemInit+0x20>)
 8000dac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000db0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	e000ed00 	.word	0xe000ed00

08000dc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000dc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dfc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dc8:	480d      	ldr	r0, [pc, #52]	; (8000e00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dca:	490e      	ldr	r1, [pc, #56]	; (8000e04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dcc:	4a0e      	ldr	r2, [pc, #56]	; (8000e08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd0:	e002      	b.n	8000dd8 <LoopCopyDataInit>

08000dd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dd6:	3304      	adds	r3, #4

08000dd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ddc:	d3f9      	bcc.n	8000dd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dde:	4a0b      	ldr	r2, [pc, #44]	; (8000e0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000de0:	4c0b      	ldr	r4, [pc, #44]	; (8000e10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000de2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de4:	e001      	b.n	8000dea <LoopFillZerobss>

08000de6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000de6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de8:	3204      	adds	r2, #4

08000dea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dec:	d3fb      	bcc.n	8000de6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dee:	f7ff ffd7 	bl	8000da0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000df2:	f000 ffab 	bl	8001d4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000df6:	f7ff fc3f 	bl	8000678 <main>
  bx  lr    
 8000dfa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000dfc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e04:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000e08:	08001ddc 	.word	0x08001ddc
  ldr r2, =_sbss
 8000e0c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000e10:	20000084 	.word	0x20000084

08000e14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e14:	e7fe      	b.n	8000e14 <ADC_IRQHandler>
	...

08000e18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e1c:	4b0e      	ldr	r3, [pc, #56]	; (8000e58 <HAL_Init+0x40>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a0d      	ldr	r2, [pc, #52]	; (8000e58 <HAL_Init+0x40>)
 8000e22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e28:	4b0b      	ldr	r3, [pc, #44]	; (8000e58 <HAL_Init+0x40>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a0a      	ldr	r2, [pc, #40]	; (8000e58 <HAL_Init+0x40>)
 8000e2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e34:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <HAL_Init+0x40>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a07      	ldr	r2, [pc, #28]	; (8000e58 <HAL_Init+0x40>)
 8000e3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e40:	2003      	movs	r0, #3
 8000e42:	f000 f92b 	bl	800109c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e46:	200f      	movs	r0, #15
 8000e48:	f000 f808 	bl	8000e5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e4c:	f7ff ff04 	bl	8000c58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e50:	2300      	movs	r3, #0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40023c00 	.word	0x40023c00

08000e5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e64:	4b12      	ldr	r3, [pc, #72]	; (8000eb0 <HAL_InitTick+0x54>)
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	4b12      	ldr	r3, [pc, #72]	; (8000eb4 <HAL_InitTick+0x58>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f000 f943 	bl	8001106 <HAL_SYSTICK_Config>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e00e      	b.n	8000ea8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2b0f      	cmp	r3, #15
 8000e8e:	d80a      	bhi.n	8000ea6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e90:	2200      	movs	r2, #0
 8000e92:	6879      	ldr	r1, [r7, #4]
 8000e94:	f04f 30ff 	mov.w	r0, #4294967295
 8000e98:	f000 f90b 	bl	80010b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e9c:	4a06      	ldr	r2, [pc, #24]	; (8000eb8 <HAL_InitTick+0x5c>)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	e000      	b.n	8000ea8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20000004 	.word	0x20000004
 8000eb4:	2000000c 	.word	0x2000000c
 8000eb8:	20000008 	.word	0x20000008

08000ebc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ec0:	4b06      	ldr	r3, [pc, #24]	; (8000edc <HAL_IncTick+0x20>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <HAL_IncTick+0x24>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4413      	add	r3, r2
 8000ecc:	4a04      	ldr	r2, [pc, #16]	; (8000ee0 <HAL_IncTick+0x24>)
 8000ece:	6013      	str	r3, [r2, #0]
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	2000000c 	.word	0x2000000c
 8000ee0:	20000080 	.word	0x20000080

08000ee4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee8:	4b03      	ldr	r3, [pc, #12]	; (8000ef8 <HAL_GetTick+0x14>)
 8000eea:	681b      	ldr	r3, [r3, #0]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	20000080 	.word	0x20000080

08000efc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f003 0307 	and.w	r3, r3, #7
 8000f0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f0c:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <__NVIC_SetPriorityGrouping+0x44>)
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f12:	68ba      	ldr	r2, [r7, #8]
 8000f14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f18:	4013      	ands	r3, r2
 8000f1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f2e:	4a04      	ldr	r2, [pc, #16]	; (8000f40 <__NVIC_SetPriorityGrouping+0x44>)
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	60d3      	str	r3, [r2, #12]
}
 8000f34:	bf00      	nop
 8000f36:	3714      	adds	r7, #20
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f48:	4b04      	ldr	r3, [pc, #16]	; (8000f5c <__NVIC_GetPriorityGrouping+0x18>)
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	0a1b      	lsrs	r3, r3, #8
 8000f4e:	f003 0307 	and.w	r3, r3, #7
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	db0b      	blt.n	8000f8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	f003 021f 	and.w	r2, r3, #31
 8000f78:	4907      	ldr	r1, [pc, #28]	; (8000f98 <__NVIC_EnableIRQ+0x38>)
 8000f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7e:	095b      	lsrs	r3, r3, #5
 8000f80:	2001      	movs	r0, #1
 8000f82:	fa00 f202 	lsl.w	r2, r0, r2
 8000f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	e000e100 	.word	0xe000e100

08000f9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	6039      	str	r1, [r7, #0]
 8000fa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	db0a      	blt.n	8000fc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	b2da      	uxtb	r2, r3
 8000fb4:	490c      	ldr	r1, [pc, #48]	; (8000fe8 <__NVIC_SetPriority+0x4c>)
 8000fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fba:	0112      	lsls	r2, r2, #4
 8000fbc:	b2d2      	uxtb	r2, r2
 8000fbe:	440b      	add	r3, r1
 8000fc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fc4:	e00a      	b.n	8000fdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	4908      	ldr	r1, [pc, #32]	; (8000fec <__NVIC_SetPriority+0x50>)
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	f003 030f 	and.w	r3, r3, #15
 8000fd2:	3b04      	subs	r3, #4
 8000fd4:	0112      	lsls	r2, r2, #4
 8000fd6:	b2d2      	uxtb	r2, r2
 8000fd8:	440b      	add	r3, r1
 8000fda:	761a      	strb	r2, [r3, #24]
}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	e000e100 	.word	0xe000e100
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b089      	sub	sp, #36	; 0x24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	f003 0307 	and.w	r3, r3, #7
 8001002:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	f1c3 0307 	rsb	r3, r3, #7
 800100a:	2b04      	cmp	r3, #4
 800100c:	bf28      	it	cs
 800100e:	2304      	movcs	r3, #4
 8001010:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	3304      	adds	r3, #4
 8001016:	2b06      	cmp	r3, #6
 8001018:	d902      	bls.n	8001020 <NVIC_EncodePriority+0x30>
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	3b03      	subs	r3, #3
 800101e:	e000      	b.n	8001022 <NVIC_EncodePriority+0x32>
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001024:	f04f 32ff 	mov.w	r2, #4294967295
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43da      	mvns	r2, r3
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	401a      	ands	r2, r3
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001038:	f04f 31ff 	mov.w	r1, #4294967295
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	fa01 f303 	lsl.w	r3, r1, r3
 8001042:	43d9      	mvns	r1, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001048:	4313      	orrs	r3, r2
         );
}
 800104a:	4618      	mov	r0, r3
 800104c:	3724      	adds	r7, #36	; 0x24
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
	...

08001058 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3b01      	subs	r3, #1
 8001064:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001068:	d301      	bcc.n	800106e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800106a:	2301      	movs	r3, #1
 800106c:	e00f      	b.n	800108e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800106e:	4a0a      	ldr	r2, [pc, #40]	; (8001098 <SysTick_Config+0x40>)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3b01      	subs	r3, #1
 8001074:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001076:	210f      	movs	r1, #15
 8001078:	f04f 30ff 	mov.w	r0, #4294967295
 800107c:	f7ff ff8e 	bl	8000f9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001080:	4b05      	ldr	r3, [pc, #20]	; (8001098 <SysTick_Config+0x40>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001086:	4b04      	ldr	r3, [pc, #16]	; (8001098 <SysTick_Config+0x40>)
 8001088:	2207      	movs	r2, #7
 800108a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800108c:	2300      	movs	r3, #0
}
 800108e:	4618      	mov	r0, r3
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	e000e010 	.word	0xe000e010

0800109c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f7ff ff29 	bl	8000efc <__NVIC_SetPriorityGrouping>
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b086      	sub	sp, #24
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	4603      	mov	r3, r0
 80010ba:	60b9      	str	r1, [r7, #8]
 80010bc:	607a      	str	r2, [r7, #4]
 80010be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010c4:	f7ff ff3e 	bl	8000f44 <__NVIC_GetPriorityGrouping>
 80010c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	68b9      	ldr	r1, [r7, #8]
 80010ce:	6978      	ldr	r0, [r7, #20]
 80010d0:	f7ff ff8e 	bl	8000ff0 <NVIC_EncodePriority>
 80010d4:	4602      	mov	r2, r0
 80010d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010da:	4611      	mov	r1, r2
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff5d 	bl	8000f9c <__NVIC_SetPriority>
}
 80010e2:	bf00      	nop
 80010e4:	3718      	adds	r7, #24
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	4603      	mov	r3, r0
 80010f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff31 	bl	8000f60 <__NVIC_EnableIRQ>
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b082      	sub	sp, #8
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f7ff ffa2 	bl	8001058 <SysTick_Config>
 8001114:	4603      	mov	r3, r0
}
 8001116:	4618      	mov	r0, r3
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
	...

08001120 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001120:	b480      	push	{r7}
 8001122:	b089      	sub	sp, #36	; 0x24
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800112a:	2300      	movs	r3, #0
 800112c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800112e:	2300      	movs	r3, #0
 8001130:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001132:	2300      	movs	r3, #0
 8001134:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001136:	2300      	movs	r3, #0
 8001138:	61fb      	str	r3, [r7, #28]
 800113a:	e16b      	b.n	8001414 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800113c:	2201      	movs	r2, #1
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	697a      	ldr	r2, [r7, #20]
 800114c:	4013      	ands	r3, r2
 800114e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	429a      	cmp	r2, r3
 8001156:	f040 815a 	bne.w	800140e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f003 0303 	and.w	r3, r3, #3
 8001162:	2b01      	cmp	r3, #1
 8001164:	d005      	beq.n	8001172 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800116e:	2b02      	cmp	r3, #2
 8001170:	d130      	bne.n	80011d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	2203      	movs	r2, #3
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43db      	mvns	r3, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4013      	ands	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	68da      	ldr	r2, [r3, #12]
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4313      	orrs	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011a8:	2201      	movs	r2, #1
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	43db      	mvns	r3, r3
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4013      	ands	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	091b      	lsrs	r3, r3, #4
 80011be:	f003 0201 	and.w	r2, r3, #1
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f003 0303 	and.w	r3, r3, #3
 80011dc:	2b03      	cmp	r3, #3
 80011de:	d017      	beq.n	8001210 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	2203      	movs	r2, #3
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	43db      	mvns	r3, r3
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	4013      	ands	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	689a      	ldr	r2, [r3, #8]
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4313      	orrs	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f003 0303 	and.w	r3, r3, #3
 8001218:	2b02      	cmp	r3, #2
 800121a:	d123      	bne.n	8001264 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	08da      	lsrs	r2, r3, #3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3208      	adds	r2, #8
 8001224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001228:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	f003 0307 	and.w	r3, r3, #7
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	220f      	movs	r2, #15
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	43db      	mvns	r3, r3
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4013      	ands	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	691a      	ldr	r2, [r3, #16]
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	4313      	orrs	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	08da      	lsrs	r2, r3, #3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	3208      	adds	r2, #8
 800125e:	69b9      	ldr	r1, [r7, #24]
 8001260:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	2203      	movs	r2, #3
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	43db      	mvns	r3, r3
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4013      	ands	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f003 0203 	and.w	r2, r3, #3
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4313      	orrs	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	f000 80b4 	beq.w	800140e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	4b60      	ldr	r3, [pc, #384]	; (800142c <HAL_GPIO_Init+0x30c>)
 80012ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ae:	4a5f      	ldr	r2, [pc, #380]	; (800142c <HAL_GPIO_Init+0x30c>)
 80012b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012b4:	6453      	str	r3, [r2, #68]	; 0x44
 80012b6:	4b5d      	ldr	r3, [pc, #372]	; (800142c <HAL_GPIO_Init+0x30c>)
 80012b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012c2:	4a5b      	ldr	r2, [pc, #364]	; (8001430 <HAL_GPIO_Init+0x310>)
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	089b      	lsrs	r3, r3, #2
 80012c8:	3302      	adds	r3, #2
 80012ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	f003 0303 	and.w	r3, r3, #3
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	220f      	movs	r2, #15
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	43db      	mvns	r3, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4013      	ands	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a52      	ldr	r2, [pc, #328]	; (8001434 <HAL_GPIO_Init+0x314>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d02b      	beq.n	8001346 <HAL_GPIO_Init+0x226>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a51      	ldr	r2, [pc, #324]	; (8001438 <HAL_GPIO_Init+0x318>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d025      	beq.n	8001342 <HAL_GPIO_Init+0x222>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a50      	ldr	r2, [pc, #320]	; (800143c <HAL_GPIO_Init+0x31c>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d01f      	beq.n	800133e <HAL_GPIO_Init+0x21e>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a4f      	ldr	r2, [pc, #316]	; (8001440 <HAL_GPIO_Init+0x320>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d019      	beq.n	800133a <HAL_GPIO_Init+0x21a>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a4e      	ldr	r2, [pc, #312]	; (8001444 <HAL_GPIO_Init+0x324>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d013      	beq.n	8001336 <HAL_GPIO_Init+0x216>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a4d      	ldr	r2, [pc, #308]	; (8001448 <HAL_GPIO_Init+0x328>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d00d      	beq.n	8001332 <HAL_GPIO_Init+0x212>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a4c      	ldr	r2, [pc, #304]	; (800144c <HAL_GPIO_Init+0x32c>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d007      	beq.n	800132e <HAL_GPIO_Init+0x20e>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a4b      	ldr	r2, [pc, #300]	; (8001450 <HAL_GPIO_Init+0x330>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d101      	bne.n	800132a <HAL_GPIO_Init+0x20a>
 8001326:	2307      	movs	r3, #7
 8001328:	e00e      	b.n	8001348 <HAL_GPIO_Init+0x228>
 800132a:	2308      	movs	r3, #8
 800132c:	e00c      	b.n	8001348 <HAL_GPIO_Init+0x228>
 800132e:	2306      	movs	r3, #6
 8001330:	e00a      	b.n	8001348 <HAL_GPIO_Init+0x228>
 8001332:	2305      	movs	r3, #5
 8001334:	e008      	b.n	8001348 <HAL_GPIO_Init+0x228>
 8001336:	2304      	movs	r3, #4
 8001338:	e006      	b.n	8001348 <HAL_GPIO_Init+0x228>
 800133a:	2303      	movs	r3, #3
 800133c:	e004      	b.n	8001348 <HAL_GPIO_Init+0x228>
 800133e:	2302      	movs	r3, #2
 8001340:	e002      	b.n	8001348 <HAL_GPIO_Init+0x228>
 8001342:	2301      	movs	r3, #1
 8001344:	e000      	b.n	8001348 <HAL_GPIO_Init+0x228>
 8001346:	2300      	movs	r3, #0
 8001348:	69fa      	ldr	r2, [r7, #28]
 800134a:	f002 0203 	and.w	r2, r2, #3
 800134e:	0092      	lsls	r2, r2, #2
 8001350:	4093      	lsls	r3, r2
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	4313      	orrs	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001358:	4935      	ldr	r1, [pc, #212]	; (8001430 <HAL_GPIO_Init+0x310>)
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	089b      	lsrs	r3, r3, #2
 800135e:	3302      	adds	r3, #2
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001366:	4b3b      	ldr	r3, [pc, #236]	; (8001454 <HAL_GPIO_Init+0x334>)
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	43db      	mvns	r3, r3
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4013      	ands	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d003      	beq.n	800138a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	4313      	orrs	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800138a:	4a32      	ldr	r2, [pc, #200]	; (8001454 <HAL_GPIO_Init+0x334>)
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001390:	4b30      	ldr	r3, [pc, #192]	; (8001454 <HAL_GPIO_Init+0x334>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	43db      	mvns	r3, r3
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	4013      	ands	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d003      	beq.n	80013b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013b4:	4a27      	ldr	r2, [pc, #156]	; (8001454 <HAL_GPIO_Init+0x334>)
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013ba:	4b26      	ldr	r3, [pc, #152]	; (8001454 <HAL_GPIO_Init+0x334>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	43db      	mvns	r3, r3
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	4013      	ands	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d003      	beq.n	80013de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	4313      	orrs	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013de:	4a1d      	ldr	r2, [pc, #116]	; (8001454 <HAL_GPIO_Init+0x334>)
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013e4:	4b1b      	ldr	r3, [pc, #108]	; (8001454 <HAL_GPIO_Init+0x334>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	43db      	mvns	r3, r3
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	4013      	ands	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d003      	beq.n	8001408 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	4313      	orrs	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001408:	4a12      	ldr	r2, [pc, #72]	; (8001454 <HAL_GPIO_Init+0x334>)
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	3301      	adds	r3, #1
 8001412:	61fb      	str	r3, [r7, #28]
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	2b0f      	cmp	r3, #15
 8001418:	f67f ae90 	bls.w	800113c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800141c:	bf00      	nop
 800141e:	bf00      	nop
 8001420:	3724      	adds	r7, #36	; 0x24
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	40023800 	.word	0x40023800
 8001430:	40013800 	.word	0x40013800
 8001434:	40020000 	.word	0x40020000
 8001438:	40020400 	.word	0x40020400
 800143c:	40020800 	.word	0x40020800
 8001440:	40020c00 	.word	0x40020c00
 8001444:	40021000 	.word	0x40021000
 8001448:	40021400 	.word	0x40021400
 800144c:	40021800 	.word	0x40021800
 8001450:	40021c00 	.word	0x40021c00
 8001454:	40013c00 	.word	0x40013c00

08001458 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	460b      	mov	r3, r1
 8001462:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	691a      	ldr	r2, [r3, #16]
 8001468:	887b      	ldrh	r3, [r7, #2]
 800146a:	4013      	ands	r3, r2
 800146c:	2b00      	cmp	r3, #0
 800146e:	d002      	beq.n	8001476 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001470:	2301      	movs	r3, #1
 8001472:	73fb      	strb	r3, [r7, #15]
 8001474:	e001      	b.n	800147a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001476:	2300      	movs	r3, #0
 8001478:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800147a:	7bfb      	ldrb	r3, [r7, #15]
}
 800147c:	4618      	mov	r0, r3
 800147e:	3714      	adds	r7, #20
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	460b      	mov	r3, r1
 8001492:	807b      	strh	r3, [r7, #2]
 8001494:	4613      	mov	r3, r2
 8001496:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001498:	787b      	ldrb	r3, [r7, #1]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d003      	beq.n	80014a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800149e:	887a      	ldrh	r2, [r7, #2]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014a4:	e003      	b.n	80014ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014a6:	887b      	ldrh	r3, [r7, #2]
 80014a8:	041a      	lsls	r2, r3, #16
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	619a      	str	r2, [r3, #24]
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
	...

080014bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80014c6:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014c8:	695a      	ldr	r2, [r3, #20]
 80014ca:	88fb      	ldrh	r3, [r7, #6]
 80014cc:	4013      	ands	r3, r2
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d006      	beq.n	80014e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014d2:	4a05      	ldr	r2, [pc, #20]	; (80014e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014d4:	88fb      	ldrh	r3, [r7, #6]
 80014d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014d8:	88fb      	ldrh	r3, [r7, #6]
 80014da:	4618      	mov	r0, r3
 80014dc:	f000 f806 	bl	80014ec <HAL_GPIO_EXTI_Callback>
  }
}
 80014e0:	bf00      	nop
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	40013c00 	.word	0x40013c00

080014ec <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80014f6:	bf00      	nop
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
	...

08001504 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b086      	sub	sp, #24
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d101      	bne.n	8001516 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e267      	b.n	80019e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	2b00      	cmp	r3, #0
 8001520:	d075      	beq.n	800160e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001522:	4b88      	ldr	r3, [pc, #544]	; (8001744 <HAL_RCC_OscConfig+0x240>)
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	f003 030c 	and.w	r3, r3, #12
 800152a:	2b04      	cmp	r3, #4
 800152c:	d00c      	beq.n	8001548 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800152e:	4b85      	ldr	r3, [pc, #532]	; (8001744 <HAL_RCC_OscConfig+0x240>)
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001536:	2b08      	cmp	r3, #8
 8001538:	d112      	bne.n	8001560 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800153a:	4b82      	ldr	r3, [pc, #520]	; (8001744 <HAL_RCC_OscConfig+0x240>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001542:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001546:	d10b      	bne.n	8001560 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001548:	4b7e      	ldr	r3, [pc, #504]	; (8001744 <HAL_RCC_OscConfig+0x240>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d05b      	beq.n	800160c <HAL_RCC_OscConfig+0x108>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d157      	bne.n	800160c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e242      	b.n	80019e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001568:	d106      	bne.n	8001578 <HAL_RCC_OscConfig+0x74>
 800156a:	4b76      	ldr	r3, [pc, #472]	; (8001744 <HAL_RCC_OscConfig+0x240>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a75      	ldr	r2, [pc, #468]	; (8001744 <HAL_RCC_OscConfig+0x240>)
 8001570:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001574:	6013      	str	r3, [r2, #0]
 8001576:	e01d      	b.n	80015b4 <HAL_RCC_OscConfig+0xb0>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001580:	d10c      	bne.n	800159c <HAL_RCC_OscConfig+0x98>
 8001582:	4b70      	ldr	r3, [pc, #448]	; (8001744 <HAL_RCC_OscConfig+0x240>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a6f      	ldr	r2, [pc, #444]	; (8001744 <HAL_RCC_OscConfig+0x240>)
 8001588:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800158c:	6013      	str	r3, [r2, #0]
 800158e:	4b6d      	ldr	r3, [pc, #436]	; (8001744 <HAL_RCC_OscConfig+0x240>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a6c      	ldr	r2, [pc, #432]	; (8001744 <HAL_RCC_OscConfig+0x240>)
 8001594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001598:	6013      	str	r3, [r2, #0]
 800159a:	e00b      	b.n	80015b4 <HAL_RCC_OscConfig+0xb0>
 800159c:	4b69      	ldr	r3, [pc, #420]	; (8001744 <HAL_RCC_OscConfig+0x240>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a68      	ldr	r2, [pc, #416]	; (8001744 <HAL_RCC_OscConfig+0x240>)
 80015a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015a6:	6013      	str	r3, [r2, #0]
 80015a8:	4b66      	ldr	r3, [pc, #408]	; (8001744 <HAL_RCC_OscConfig+0x240>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a65      	ldr	r2, [pc, #404]	; (8001744 <HAL_RCC_OscConfig+0x240>)
 80015ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d013      	beq.n	80015e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015bc:	f7ff fc92 	bl	8000ee4 <HAL_GetTick>
 80015c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015c4:	f7ff fc8e 	bl	8000ee4 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b64      	cmp	r3, #100	; 0x64
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e207      	b.n	80019e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015d6:	4b5b      	ldr	r3, [pc, #364]	; (8001744 <HAL_RCC_OscConfig+0x240>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d0f0      	beq.n	80015c4 <HAL_RCC_OscConfig+0xc0>
 80015e2:	e014      	b.n	800160e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e4:	f7ff fc7e 	bl	8000ee4 <HAL_GetTick>
 80015e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ea:	e008      	b.n	80015fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015ec:	f7ff fc7a 	bl	8000ee4 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b64      	cmp	r3, #100	; 0x64
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e1f3      	b.n	80019e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015fe:	4b51      	ldr	r3, [pc, #324]	; (8001744 <HAL_RCC_OscConfig+0x240>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d1f0      	bne.n	80015ec <HAL_RCC_OscConfig+0xe8>
 800160a:	e000      	b.n	800160e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800160c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d063      	beq.n	80016e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800161a:	4b4a      	ldr	r3, [pc, #296]	; (8001744 <HAL_RCC_OscConfig+0x240>)
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f003 030c 	and.w	r3, r3, #12
 8001622:	2b00      	cmp	r3, #0
 8001624:	d00b      	beq.n	800163e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001626:	4b47      	ldr	r3, [pc, #284]	; (8001744 <HAL_RCC_OscConfig+0x240>)
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800162e:	2b08      	cmp	r3, #8
 8001630:	d11c      	bne.n	800166c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001632:	4b44      	ldr	r3, [pc, #272]	; (8001744 <HAL_RCC_OscConfig+0x240>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d116      	bne.n	800166c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800163e:	4b41      	ldr	r3, [pc, #260]	; (8001744 <HAL_RCC_OscConfig+0x240>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	2b00      	cmp	r3, #0
 8001648:	d005      	beq.n	8001656 <HAL_RCC_OscConfig+0x152>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d001      	beq.n	8001656 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e1c7      	b.n	80019e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001656:	4b3b      	ldr	r3, [pc, #236]	; (8001744 <HAL_RCC_OscConfig+0x240>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	691b      	ldr	r3, [r3, #16]
 8001662:	00db      	lsls	r3, r3, #3
 8001664:	4937      	ldr	r1, [pc, #220]	; (8001744 <HAL_RCC_OscConfig+0x240>)
 8001666:	4313      	orrs	r3, r2
 8001668:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800166a:	e03a      	b.n	80016e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d020      	beq.n	80016b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001674:	4b34      	ldr	r3, [pc, #208]	; (8001748 <HAL_RCC_OscConfig+0x244>)
 8001676:	2201      	movs	r2, #1
 8001678:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800167a:	f7ff fc33 	bl	8000ee4 <HAL_GetTick>
 800167e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001680:	e008      	b.n	8001694 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001682:	f7ff fc2f 	bl	8000ee4 <HAL_GetTick>
 8001686:	4602      	mov	r2, r0
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	2b02      	cmp	r3, #2
 800168e:	d901      	bls.n	8001694 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	e1a8      	b.n	80019e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001694:	4b2b      	ldr	r3, [pc, #172]	; (8001744 <HAL_RCC_OscConfig+0x240>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0302 	and.w	r3, r3, #2
 800169c:	2b00      	cmp	r3, #0
 800169e:	d0f0      	beq.n	8001682 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016a0:	4b28      	ldr	r3, [pc, #160]	; (8001744 <HAL_RCC_OscConfig+0x240>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	691b      	ldr	r3, [r3, #16]
 80016ac:	00db      	lsls	r3, r3, #3
 80016ae:	4925      	ldr	r1, [pc, #148]	; (8001744 <HAL_RCC_OscConfig+0x240>)
 80016b0:	4313      	orrs	r3, r2
 80016b2:	600b      	str	r3, [r1, #0]
 80016b4:	e015      	b.n	80016e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016b6:	4b24      	ldr	r3, [pc, #144]	; (8001748 <HAL_RCC_OscConfig+0x244>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016bc:	f7ff fc12 	bl	8000ee4 <HAL_GetTick>
 80016c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016c4:	f7ff fc0e 	bl	8000ee4 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e187      	b.n	80019e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016d6:	4b1b      	ldr	r3, [pc, #108]	; (8001744 <HAL_RCC_OscConfig+0x240>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d1f0      	bne.n	80016c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0308 	and.w	r3, r3, #8
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d036      	beq.n	800175c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	695b      	ldr	r3, [r3, #20]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d016      	beq.n	8001724 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016f6:	4b15      	ldr	r3, [pc, #84]	; (800174c <HAL_RCC_OscConfig+0x248>)
 80016f8:	2201      	movs	r2, #1
 80016fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016fc:	f7ff fbf2 	bl	8000ee4 <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001702:	e008      	b.n	8001716 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001704:	f7ff fbee 	bl	8000ee4 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b02      	cmp	r3, #2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e167      	b.n	80019e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001716:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <HAL_RCC_OscConfig+0x240>)
 8001718:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d0f0      	beq.n	8001704 <HAL_RCC_OscConfig+0x200>
 8001722:	e01b      	b.n	800175c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001724:	4b09      	ldr	r3, [pc, #36]	; (800174c <HAL_RCC_OscConfig+0x248>)
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800172a:	f7ff fbdb 	bl	8000ee4 <HAL_GetTick>
 800172e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001730:	e00e      	b.n	8001750 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001732:	f7ff fbd7 	bl	8000ee4 <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	2b02      	cmp	r3, #2
 800173e:	d907      	bls.n	8001750 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e150      	b.n	80019e6 <HAL_RCC_OscConfig+0x4e2>
 8001744:	40023800 	.word	0x40023800
 8001748:	42470000 	.word	0x42470000
 800174c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001750:	4b88      	ldr	r3, [pc, #544]	; (8001974 <HAL_RCC_OscConfig+0x470>)
 8001752:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001754:	f003 0302 	and.w	r3, r3, #2
 8001758:	2b00      	cmp	r3, #0
 800175a:	d1ea      	bne.n	8001732 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0304 	and.w	r3, r3, #4
 8001764:	2b00      	cmp	r3, #0
 8001766:	f000 8097 	beq.w	8001898 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800176a:	2300      	movs	r3, #0
 800176c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800176e:	4b81      	ldr	r3, [pc, #516]	; (8001974 <HAL_RCC_OscConfig+0x470>)
 8001770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d10f      	bne.n	800179a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	60bb      	str	r3, [r7, #8]
 800177e:	4b7d      	ldr	r3, [pc, #500]	; (8001974 <HAL_RCC_OscConfig+0x470>)
 8001780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001782:	4a7c      	ldr	r2, [pc, #496]	; (8001974 <HAL_RCC_OscConfig+0x470>)
 8001784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001788:	6413      	str	r3, [r2, #64]	; 0x40
 800178a:	4b7a      	ldr	r3, [pc, #488]	; (8001974 <HAL_RCC_OscConfig+0x470>)
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001792:	60bb      	str	r3, [r7, #8]
 8001794:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001796:	2301      	movs	r3, #1
 8001798:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800179a:	4b77      	ldr	r3, [pc, #476]	; (8001978 <HAL_RCC_OscConfig+0x474>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d118      	bne.n	80017d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017a6:	4b74      	ldr	r3, [pc, #464]	; (8001978 <HAL_RCC_OscConfig+0x474>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a73      	ldr	r2, [pc, #460]	; (8001978 <HAL_RCC_OscConfig+0x474>)
 80017ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017b2:	f7ff fb97 	bl	8000ee4 <HAL_GetTick>
 80017b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017b8:	e008      	b.n	80017cc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017ba:	f7ff fb93 	bl	8000ee4 <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e10c      	b.n	80019e6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017cc:	4b6a      	ldr	r3, [pc, #424]	; (8001978 <HAL_RCC_OscConfig+0x474>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d0f0      	beq.n	80017ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d106      	bne.n	80017ee <HAL_RCC_OscConfig+0x2ea>
 80017e0:	4b64      	ldr	r3, [pc, #400]	; (8001974 <HAL_RCC_OscConfig+0x470>)
 80017e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017e4:	4a63      	ldr	r2, [pc, #396]	; (8001974 <HAL_RCC_OscConfig+0x470>)
 80017e6:	f043 0301 	orr.w	r3, r3, #1
 80017ea:	6713      	str	r3, [r2, #112]	; 0x70
 80017ec:	e01c      	b.n	8001828 <HAL_RCC_OscConfig+0x324>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	2b05      	cmp	r3, #5
 80017f4:	d10c      	bne.n	8001810 <HAL_RCC_OscConfig+0x30c>
 80017f6:	4b5f      	ldr	r3, [pc, #380]	; (8001974 <HAL_RCC_OscConfig+0x470>)
 80017f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017fa:	4a5e      	ldr	r2, [pc, #376]	; (8001974 <HAL_RCC_OscConfig+0x470>)
 80017fc:	f043 0304 	orr.w	r3, r3, #4
 8001800:	6713      	str	r3, [r2, #112]	; 0x70
 8001802:	4b5c      	ldr	r3, [pc, #368]	; (8001974 <HAL_RCC_OscConfig+0x470>)
 8001804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001806:	4a5b      	ldr	r2, [pc, #364]	; (8001974 <HAL_RCC_OscConfig+0x470>)
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	6713      	str	r3, [r2, #112]	; 0x70
 800180e:	e00b      	b.n	8001828 <HAL_RCC_OscConfig+0x324>
 8001810:	4b58      	ldr	r3, [pc, #352]	; (8001974 <HAL_RCC_OscConfig+0x470>)
 8001812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001814:	4a57      	ldr	r2, [pc, #348]	; (8001974 <HAL_RCC_OscConfig+0x470>)
 8001816:	f023 0301 	bic.w	r3, r3, #1
 800181a:	6713      	str	r3, [r2, #112]	; 0x70
 800181c:	4b55      	ldr	r3, [pc, #340]	; (8001974 <HAL_RCC_OscConfig+0x470>)
 800181e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001820:	4a54      	ldr	r2, [pc, #336]	; (8001974 <HAL_RCC_OscConfig+0x470>)
 8001822:	f023 0304 	bic.w	r3, r3, #4
 8001826:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d015      	beq.n	800185c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001830:	f7ff fb58 	bl	8000ee4 <HAL_GetTick>
 8001834:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001836:	e00a      	b.n	800184e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001838:	f7ff fb54 	bl	8000ee4 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	f241 3288 	movw	r2, #5000	; 0x1388
 8001846:	4293      	cmp	r3, r2
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e0cb      	b.n	80019e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800184e:	4b49      	ldr	r3, [pc, #292]	; (8001974 <HAL_RCC_OscConfig+0x470>)
 8001850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	2b00      	cmp	r3, #0
 8001858:	d0ee      	beq.n	8001838 <HAL_RCC_OscConfig+0x334>
 800185a:	e014      	b.n	8001886 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800185c:	f7ff fb42 	bl	8000ee4 <HAL_GetTick>
 8001860:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001862:	e00a      	b.n	800187a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001864:	f7ff fb3e 	bl	8000ee4 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001872:	4293      	cmp	r3, r2
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e0b5      	b.n	80019e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800187a:	4b3e      	ldr	r3, [pc, #248]	; (8001974 <HAL_RCC_OscConfig+0x470>)
 800187c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1ee      	bne.n	8001864 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001886:	7dfb      	ldrb	r3, [r7, #23]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d105      	bne.n	8001898 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800188c:	4b39      	ldr	r3, [pc, #228]	; (8001974 <HAL_RCC_OscConfig+0x470>)
 800188e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001890:	4a38      	ldr	r2, [pc, #224]	; (8001974 <HAL_RCC_OscConfig+0x470>)
 8001892:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001896:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	2b00      	cmp	r3, #0
 800189e:	f000 80a1 	beq.w	80019e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018a2:	4b34      	ldr	r3, [pc, #208]	; (8001974 <HAL_RCC_OscConfig+0x470>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	f003 030c 	and.w	r3, r3, #12
 80018aa:	2b08      	cmp	r3, #8
 80018ac:	d05c      	beq.n	8001968 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	699b      	ldr	r3, [r3, #24]
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d141      	bne.n	800193a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018b6:	4b31      	ldr	r3, [pc, #196]	; (800197c <HAL_RCC_OscConfig+0x478>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018bc:	f7ff fb12 	bl	8000ee4 <HAL_GetTick>
 80018c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018c2:	e008      	b.n	80018d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018c4:	f7ff fb0e 	bl	8000ee4 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e087      	b.n	80019e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018d6:	4b27      	ldr	r3, [pc, #156]	; (8001974 <HAL_RCC_OscConfig+0x470>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1f0      	bne.n	80018c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	69da      	ldr	r2, [r3, #28]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a1b      	ldr	r3, [r3, #32]
 80018ea:	431a      	orrs	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f0:	019b      	lsls	r3, r3, #6
 80018f2:	431a      	orrs	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f8:	085b      	lsrs	r3, r3, #1
 80018fa:	3b01      	subs	r3, #1
 80018fc:	041b      	lsls	r3, r3, #16
 80018fe:	431a      	orrs	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001904:	061b      	lsls	r3, r3, #24
 8001906:	491b      	ldr	r1, [pc, #108]	; (8001974 <HAL_RCC_OscConfig+0x470>)
 8001908:	4313      	orrs	r3, r2
 800190a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800190c:	4b1b      	ldr	r3, [pc, #108]	; (800197c <HAL_RCC_OscConfig+0x478>)
 800190e:	2201      	movs	r2, #1
 8001910:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001912:	f7ff fae7 	bl	8000ee4 <HAL_GetTick>
 8001916:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001918:	e008      	b.n	800192c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800191a:	f7ff fae3 	bl	8000ee4 <HAL_GetTick>
 800191e:	4602      	mov	r2, r0
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	2b02      	cmp	r3, #2
 8001926:	d901      	bls.n	800192c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e05c      	b.n	80019e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800192c:	4b11      	ldr	r3, [pc, #68]	; (8001974 <HAL_RCC_OscConfig+0x470>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d0f0      	beq.n	800191a <HAL_RCC_OscConfig+0x416>
 8001938:	e054      	b.n	80019e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800193a:	4b10      	ldr	r3, [pc, #64]	; (800197c <HAL_RCC_OscConfig+0x478>)
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001940:	f7ff fad0 	bl	8000ee4 <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001948:	f7ff facc 	bl	8000ee4 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b02      	cmp	r3, #2
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e045      	b.n	80019e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800195a:	4b06      	ldr	r3, [pc, #24]	; (8001974 <HAL_RCC_OscConfig+0x470>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1f0      	bne.n	8001948 <HAL_RCC_OscConfig+0x444>
 8001966:	e03d      	b.n	80019e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d107      	bne.n	8001980 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e038      	b.n	80019e6 <HAL_RCC_OscConfig+0x4e2>
 8001974:	40023800 	.word	0x40023800
 8001978:	40007000 	.word	0x40007000
 800197c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001980:	4b1b      	ldr	r3, [pc, #108]	; (80019f0 <HAL_RCC_OscConfig+0x4ec>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	699b      	ldr	r3, [r3, #24]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d028      	beq.n	80019e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001998:	429a      	cmp	r2, r3
 800199a:	d121      	bne.n	80019e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d11a      	bne.n	80019e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80019b0:	4013      	ands	r3, r2
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d111      	bne.n	80019e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c6:	085b      	lsrs	r3, r3, #1
 80019c8:	3b01      	subs	r3, #1
 80019ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d107      	bne.n	80019e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019dc:	429a      	cmp	r2, r3
 80019de:	d001      	beq.n	80019e4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e000      	b.n	80019e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3718      	adds	r7, #24
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	40023800 	.word	0x40023800

080019f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d101      	bne.n	8001a08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e0cc      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a08:	4b68      	ldr	r3, [pc, #416]	; (8001bac <HAL_RCC_ClockConfig+0x1b8>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0307 	and.w	r3, r3, #7
 8001a10:	683a      	ldr	r2, [r7, #0]
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d90c      	bls.n	8001a30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a16:	4b65      	ldr	r3, [pc, #404]	; (8001bac <HAL_RCC_ClockConfig+0x1b8>)
 8001a18:	683a      	ldr	r2, [r7, #0]
 8001a1a:	b2d2      	uxtb	r2, r2
 8001a1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a1e:	4b63      	ldr	r3, [pc, #396]	; (8001bac <HAL_RCC_ClockConfig+0x1b8>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0307 	and.w	r3, r3, #7
 8001a26:	683a      	ldr	r2, [r7, #0]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d001      	beq.n	8001a30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e0b8      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0302 	and.w	r3, r3, #2
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d020      	beq.n	8001a7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0304 	and.w	r3, r3, #4
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d005      	beq.n	8001a54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a48:	4b59      	ldr	r3, [pc, #356]	; (8001bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	4a58      	ldr	r2, [pc, #352]	; (8001bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0308 	and.w	r3, r3, #8
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d005      	beq.n	8001a6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a60:	4b53      	ldr	r3, [pc, #332]	; (8001bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	4a52      	ldr	r2, [pc, #328]	; (8001bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a6c:	4b50      	ldr	r3, [pc, #320]	; (8001bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	494d      	ldr	r1, [pc, #308]	; (8001bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d044      	beq.n	8001b14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d107      	bne.n	8001aa2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a92:	4b47      	ldr	r3, [pc, #284]	; (8001bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d119      	bne.n	8001ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e07f      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d003      	beq.n	8001ab2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001aae:	2b03      	cmp	r3, #3
 8001ab0:	d107      	bne.n	8001ac2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ab2:	4b3f      	ldr	r3, [pc, #252]	; (8001bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d109      	bne.n	8001ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e06f      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ac2:	4b3b      	ldr	r3, [pc, #236]	; (8001bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e067      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ad2:	4b37      	ldr	r3, [pc, #220]	; (8001bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f023 0203 	bic.w	r2, r3, #3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	4934      	ldr	r1, [pc, #208]	; (8001bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ae4:	f7ff f9fe 	bl	8000ee4 <HAL_GetTick>
 8001ae8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aea:	e00a      	b.n	8001b02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aec:	f7ff f9fa 	bl	8000ee4 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e04f      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b02:	4b2b      	ldr	r3, [pc, #172]	; (8001bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f003 020c 	and.w	r2, r3, #12
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d1eb      	bne.n	8001aec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b14:	4b25      	ldr	r3, [pc, #148]	; (8001bac <HAL_RCC_ClockConfig+0x1b8>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0307 	and.w	r3, r3, #7
 8001b1c:	683a      	ldr	r2, [r7, #0]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d20c      	bcs.n	8001b3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b22:	4b22      	ldr	r3, [pc, #136]	; (8001bac <HAL_RCC_ClockConfig+0x1b8>)
 8001b24:	683a      	ldr	r2, [r7, #0]
 8001b26:	b2d2      	uxtb	r2, r2
 8001b28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b2a:	4b20      	ldr	r3, [pc, #128]	; (8001bac <HAL_RCC_ClockConfig+0x1b8>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0307 	and.w	r3, r3, #7
 8001b32:	683a      	ldr	r2, [r7, #0]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d001      	beq.n	8001b3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e032      	b.n	8001ba2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0304 	and.w	r3, r3, #4
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d008      	beq.n	8001b5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b48:	4b19      	ldr	r3, [pc, #100]	; (8001bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	4916      	ldr	r1, [pc, #88]	; (8001bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b56:	4313      	orrs	r3, r2
 8001b58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0308 	and.w	r3, r3, #8
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d009      	beq.n	8001b7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b66:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	691b      	ldr	r3, [r3, #16]
 8001b72:	00db      	lsls	r3, r3, #3
 8001b74:	490e      	ldr	r1, [pc, #56]	; (8001bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b76:	4313      	orrs	r3, r2
 8001b78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b7a:	f000 f821 	bl	8001bc0 <HAL_RCC_GetSysClockFreq>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	091b      	lsrs	r3, r3, #4
 8001b86:	f003 030f 	and.w	r3, r3, #15
 8001b8a:	490a      	ldr	r1, [pc, #40]	; (8001bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b8c:	5ccb      	ldrb	r3, [r1, r3]
 8001b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b92:	4a09      	ldr	r2, [pc, #36]	; (8001bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8001b94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b96:	4b09      	ldr	r3, [pc, #36]	; (8001bbc <HAL_RCC_ClockConfig+0x1c8>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff f95e 	bl	8000e5c <HAL_InitTick>

  return HAL_OK;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40023c00 	.word	0x40023c00
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	08001dbc 	.word	0x08001dbc
 8001bb8:	20000004 	.word	0x20000004
 8001bbc:	20000008 	.word	0x20000008

08001bc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bc4:	b090      	sub	sp, #64	; 0x40
 8001bc6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	637b      	str	r3, [r7, #52]	; 0x34
 8001bcc:	2300      	movs	r3, #0
 8001bce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bd8:	4b59      	ldr	r3, [pc, #356]	; (8001d40 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f003 030c 	and.w	r3, r3, #12
 8001be0:	2b08      	cmp	r3, #8
 8001be2:	d00d      	beq.n	8001c00 <HAL_RCC_GetSysClockFreq+0x40>
 8001be4:	2b08      	cmp	r3, #8
 8001be6:	f200 80a1 	bhi.w	8001d2c <HAL_RCC_GetSysClockFreq+0x16c>
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d002      	beq.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x34>
 8001bee:	2b04      	cmp	r3, #4
 8001bf0:	d003      	beq.n	8001bfa <HAL_RCC_GetSysClockFreq+0x3a>
 8001bf2:	e09b      	b.n	8001d2c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bf4:	4b53      	ldr	r3, [pc, #332]	; (8001d44 <HAL_RCC_GetSysClockFreq+0x184>)
 8001bf6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001bf8:	e09b      	b.n	8001d32 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bfa:	4b53      	ldr	r3, [pc, #332]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x188>)
 8001bfc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001bfe:	e098      	b.n	8001d32 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c00:	4b4f      	ldr	r3, [pc, #316]	; (8001d40 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c08:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c0a:	4b4d      	ldr	r3, [pc, #308]	; (8001d40 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d028      	beq.n	8001c68 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c16:	4b4a      	ldr	r3, [pc, #296]	; (8001d40 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	099b      	lsrs	r3, r3, #6
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	623b      	str	r3, [r7, #32]
 8001c20:	627a      	str	r2, [r7, #36]	; 0x24
 8001c22:	6a3b      	ldr	r3, [r7, #32]
 8001c24:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001c28:	2100      	movs	r1, #0
 8001c2a:	4b47      	ldr	r3, [pc, #284]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c2c:	fb03 f201 	mul.w	r2, r3, r1
 8001c30:	2300      	movs	r3, #0
 8001c32:	fb00 f303 	mul.w	r3, r0, r3
 8001c36:	4413      	add	r3, r2
 8001c38:	4a43      	ldr	r2, [pc, #268]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c3a:	fba0 1202 	umull	r1, r2, r0, r2
 8001c3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c40:	460a      	mov	r2, r1
 8001c42:	62ba      	str	r2, [r7, #40]	; 0x28
 8001c44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c46:	4413      	add	r3, r2
 8001c48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	61bb      	str	r3, [r7, #24]
 8001c50:	61fa      	str	r2, [r7, #28]
 8001c52:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c56:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001c5a:	f7fe fab5 	bl	80001c8 <__aeabi_uldivmod>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	460b      	mov	r3, r1
 8001c62:	4613      	mov	r3, r2
 8001c64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c66:	e053      	b.n	8001d10 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c68:	4b35      	ldr	r3, [pc, #212]	; (8001d40 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	099b      	lsrs	r3, r3, #6
 8001c6e:	2200      	movs	r2, #0
 8001c70:	613b      	str	r3, [r7, #16]
 8001c72:	617a      	str	r2, [r7, #20]
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001c7a:	f04f 0b00 	mov.w	fp, #0
 8001c7e:	4652      	mov	r2, sl
 8001c80:	465b      	mov	r3, fp
 8001c82:	f04f 0000 	mov.w	r0, #0
 8001c86:	f04f 0100 	mov.w	r1, #0
 8001c8a:	0159      	lsls	r1, r3, #5
 8001c8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c90:	0150      	lsls	r0, r2, #5
 8001c92:	4602      	mov	r2, r0
 8001c94:	460b      	mov	r3, r1
 8001c96:	ebb2 080a 	subs.w	r8, r2, sl
 8001c9a:	eb63 090b 	sbc.w	r9, r3, fp
 8001c9e:	f04f 0200 	mov.w	r2, #0
 8001ca2:	f04f 0300 	mov.w	r3, #0
 8001ca6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001caa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001cae:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001cb2:	ebb2 0408 	subs.w	r4, r2, r8
 8001cb6:	eb63 0509 	sbc.w	r5, r3, r9
 8001cba:	f04f 0200 	mov.w	r2, #0
 8001cbe:	f04f 0300 	mov.w	r3, #0
 8001cc2:	00eb      	lsls	r3, r5, #3
 8001cc4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cc8:	00e2      	lsls	r2, r4, #3
 8001cca:	4614      	mov	r4, r2
 8001ccc:	461d      	mov	r5, r3
 8001cce:	eb14 030a 	adds.w	r3, r4, sl
 8001cd2:	603b      	str	r3, [r7, #0]
 8001cd4:	eb45 030b 	adc.w	r3, r5, fp
 8001cd8:	607b      	str	r3, [r7, #4]
 8001cda:	f04f 0200 	mov.w	r2, #0
 8001cde:	f04f 0300 	mov.w	r3, #0
 8001ce2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ce6:	4629      	mov	r1, r5
 8001ce8:	028b      	lsls	r3, r1, #10
 8001cea:	4621      	mov	r1, r4
 8001cec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001cf0:	4621      	mov	r1, r4
 8001cf2:	028a      	lsls	r2, r1, #10
 8001cf4:	4610      	mov	r0, r2
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	60bb      	str	r3, [r7, #8]
 8001cfe:	60fa      	str	r2, [r7, #12]
 8001d00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d04:	f7fe fa60 	bl	80001c8 <__aeabi_uldivmod>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d10:	4b0b      	ldr	r3, [pc, #44]	; (8001d40 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	0c1b      	lsrs	r3, r3, #16
 8001d16:	f003 0303 	and.w	r3, r3, #3
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001d20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d28:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d2a:	e002      	b.n	8001d32 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d2c:	4b05      	ldr	r3, [pc, #20]	; (8001d44 <HAL_RCC_GetSysClockFreq+0x184>)
 8001d2e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3740      	adds	r7, #64	; 0x40
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d3e:	bf00      	nop
 8001d40:	40023800 	.word	0x40023800
 8001d44:	00f42400 	.word	0x00f42400
 8001d48:	017d7840 	.word	0x017d7840

08001d4c <__libc_init_array>:
 8001d4c:	b570      	push	{r4, r5, r6, lr}
 8001d4e:	4d0d      	ldr	r5, [pc, #52]	; (8001d84 <__libc_init_array+0x38>)
 8001d50:	4c0d      	ldr	r4, [pc, #52]	; (8001d88 <__libc_init_array+0x3c>)
 8001d52:	1b64      	subs	r4, r4, r5
 8001d54:	10a4      	asrs	r4, r4, #2
 8001d56:	2600      	movs	r6, #0
 8001d58:	42a6      	cmp	r6, r4
 8001d5a:	d109      	bne.n	8001d70 <__libc_init_array+0x24>
 8001d5c:	4d0b      	ldr	r5, [pc, #44]	; (8001d8c <__libc_init_array+0x40>)
 8001d5e:	4c0c      	ldr	r4, [pc, #48]	; (8001d90 <__libc_init_array+0x44>)
 8001d60:	f000 f820 	bl	8001da4 <_init>
 8001d64:	1b64      	subs	r4, r4, r5
 8001d66:	10a4      	asrs	r4, r4, #2
 8001d68:	2600      	movs	r6, #0
 8001d6a:	42a6      	cmp	r6, r4
 8001d6c:	d105      	bne.n	8001d7a <__libc_init_array+0x2e>
 8001d6e:	bd70      	pop	{r4, r5, r6, pc}
 8001d70:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d74:	4798      	blx	r3
 8001d76:	3601      	adds	r6, #1
 8001d78:	e7ee      	b.n	8001d58 <__libc_init_array+0xc>
 8001d7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001d7e:	4798      	blx	r3
 8001d80:	3601      	adds	r6, #1
 8001d82:	e7f2      	b.n	8001d6a <__libc_init_array+0x1e>
 8001d84:	08001dd4 	.word	0x08001dd4
 8001d88:	08001dd4 	.word	0x08001dd4
 8001d8c:	08001dd4 	.word	0x08001dd4
 8001d90:	08001dd8 	.word	0x08001dd8

08001d94 <memset>:
 8001d94:	4402      	add	r2, r0
 8001d96:	4603      	mov	r3, r0
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d100      	bne.n	8001d9e <memset+0xa>
 8001d9c:	4770      	bx	lr
 8001d9e:	f803 1b01 	strb.w	r1, [r3], #1
 8001da2:	e7f9      	b.n	8001d98 <memset+0x4>

08001da4 <_init>:
 8001da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001da6:	bf00      	nop
 8001da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001daa:	bc08      	pop	{r3}
 8001dac:	469e      	mov	lr, r3
 8001dae:	4770      	bx	lr

08001db0 <_fini>:
 8001db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001db2:	bf00      	nop
 8001db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001db6:	bc08      	pop	{r3}
 8001db8:	469e      	mov	lr, r3
 8001dba:	4770      	bx	lr
